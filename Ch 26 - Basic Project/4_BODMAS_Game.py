"""
Next, we need to declare four local variables. The first variable is called
score. This is used to store the score of the player. We initialize it to zero.
After this, we need two lists. We shall name the two lists numberList and
symbolList.
numberList should store five numbers, with 0 as their initial values.symbolList should store four strings, with ' ' as their initial values.
Finally, we need a dictionary. The dictionary consists of 4 pairs, with integers
1 to 4 as the dictionary keys, and “+”, “-”, “*”, “**” as the data. Let’s call
this operatorDict.
Try declaring and initializing the variables yourself.
(c) Generating questions
Done? Now we are ready to generate the questions. The number of questions
generated by the function depends on the instance variable _noOfQuestions
that MathGame inherited from Game. Try defining a for loop to achieve this.
You can refer to the generateQuestions() function in BinaryGame for
reference.
Done? Now, let us work on the for loop.
Within the for loop, we need to update numberList with random numbers.
To do that, we use the randint() function to generate a random number from
1 to 9. We can do this one by one since numberList only has five members.
We can write
numberList[0] = randint(1, 9)
numberList[1] = randint(1, 9)
numberList[2] = randint(1, 9)
numberList[3] = randint(1, 9)
numberList[4] = randint(1, 9)
Each time randint(1, 9) is called, it’ll randomly return an integer from the
numbers 1, 2, 3, 4, 5, 6, 7, 8, 9.
However, this is not the most elegant way of updating our numberList.
Imagine how cumbersome it’ll be if numberList has 1000 members. The
better alternative is to use a for loop.
"""